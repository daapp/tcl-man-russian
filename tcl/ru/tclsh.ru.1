'\"
'\" Copyright (c) 1993 The Regents of the University of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: tclsh.ru.1,v 1.1 2004/06/11 20:11:58 alex Exp $
'\" 
.so man.macros
.TH tclsh 1 "" Tcl "Tcl Приложения"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
tclsh \- Простая оболочка, содержащая интерпретатор Tcl
.SH SYNOPSIS
\fBtclsh\fR ?\fIимяФайла аргумент аргумент ...\fR?
.BE

.SH DESCRIPTION
.PP
\fBTclsh\fR представляет собой приложение, напоминающее оболочку,
основное назначение которой - читать команды Tcl со стандартного
потока ввода или файла и выполнять их. Если программа вызывается без
аргументов, то она переходит в интерактивный режим - читает Tcl
команды со стандартного потока ввода и печатает результат выполнения
команд и сообщения об ошибках в стандартный поток вывода.
Оболочка завершает свою работу по команде \fBexit\fR или при
обнаружении признака конца файла для стандартного потока ввода.
Если в домашнем каталоге пользователя существует файл \fB.tclshrc\fR
(или \fBtclshrc.tcl\fR в случае ОС Windows), то перед переходом в
интерактивный режим этот файл выполняется как Tcl скрипт.

.SH "SCRIPT FILES"
.PP
Если при вызове \fBtclsh\fR указаны аргументы, то первый из них будет
рассматриваться как имя файла, содержащего скрипт, а остальные
аргументы будут доступны в скрипте через переменные (см. ниже).
Вместо того, чтобы читать команды со стандартного потока ввода,
\fBtclsh\fR будет читать Tcl команды из указанного файла, при
достижении конца файла \fBtclsh\fR завершит свою работу.
.VS 8.4
Конец файла может обнаружиться не только при достижении физического
конца файла, но и при обнаружении символа с кодом '\\032' ('\\u001a',
control-Z). Если данный символ присутствует в файле, то \fBtclsh\fR
будет читать содержимое до этого символа, не включая его самого. Если
в приложении необходимо разместить символ с указанным выше кодом, то
сделать это можно закодировав его одной из  следующих
последовательностей символов: ``\\032'', ``\\x1a'' или ``\\u001a'',
или сформировать его с помощью команд \fBformat\fR или \fBbinary\fR.
.VE
Не существует способа заставить \fBtclsh\fR автоматически читать и
выполнять команды из файла \fB.tclshrc\fR при указании имени файла в
командной строке, но существует простой способ сделать это из
приложения - достаточно использовать команду \fBsource\fR.
.PP
Если первая строка файла вашего Tcl скрипта выглядит следующим образом:
.CS
\fB#!/usr/local/bin/tclsh\fR
.CE
, то Вы можете напрямую запустить скрипт из оболочки операционной
системы, предварительно установив права доступа для файла на исполнение.
Вышеуказанная строка означает, что \fBtclsh\fR был установлен в
каталоге /usr/local/bin, если интерпретатор установлен в другом
каталоге, то Вам необходимо изменить строку в соответствии с
расположением \fBtclsh\fR в  вашей операционной системе.
Многие UNIX системы имеют ограничение на длину строки \fB#!\fR в 30
символов, если это справедливо и для вашей системы, то удостоверьтесь в
том, чтобы оболочка \fBtclsh\fR была доступна с короткого имени файла.
.PP
Существует и другой, более удачный способ запуска скриптов. Выглядит
он следующим образом:
.CS
\fB#!/bin/sh
# следующая строка запускает tclsh \e
exec tclsh "$0" "$@"\fR
.CE
Такой подход имеет три преимущества перед предыдущим. Во-первых,
местонахождение исполняемого файла \fBtclsh\fR не указано жёстко в
файле, а значит \fBtclsh\fR может находится в любом каталоге,
указанном в путях поиска исполняемых файлов оболочки операционной
системы. Во-вторых, порог в 30 символов не будет нарушен, И,
в-третьих, этот способ будет работать даже если файл \fBtclsh\fR сам
является скриптом оболочки операционной системы (в некоторых системах
таким образом достигается возможность запускать программы на множестве
архитектур или операционных систем) и выбирает двоичный исполняемый
файл, который и будет запускаться.
Эти три строки заставляют \fBsh\fR и \fBtclsh\fR обрабатывать скрипт,
но при этом команду \fBexec\fR будет выполнять только
\fBsh\fR. \fBsh\fR обрабатывает скрипт первым: вторая строка
считается комментарием и пропускается, за ней выполняется третья.
Команда \fBexec\fR вынуждает оболочку операционной системы завершить
свою работу и запустить \fBtclsh\fR для обработки этого файла.
\fBTclsh\fR рассматривает все три строки, как комментарий - в конце
второй строки находится символ ``обратный слэш'', который означает,
что третья строка является продолжением второй, а значит комментарием.
.PP
.VS
Обратите внимание на то факт, что на практике встречаются случаи
установки tclsh с номером версии в имени файла. Это позволяет иметь в
системе несколько интерпретаторов разных версий одновременно. Но
недостатком такого подхода является сложность создания скриптов,
запускаемых одинаковым образом разными версиями интерпретатора.
.VE

.SH "VARIABLES"
.PP
\fBTclsh\fR устанавливает следующие переменные Tcl:
.TP 15
\fBargc\fR
Содержит счётчик количества \fIаргументов\fR (0 в случае
отсутствия). Имя файла не считается аргументом.
.TP 15
\fBargv\fR
Содержит Tcl список, элементы которого указаны в качестве
\fIаргументов\fR, в указанном порядке, или пустую строку, если
\fIаргументы\fR отсутствуют.
.TP 15
\fBargv0\fR
Содержит \fIимяФайла\fR, если оно указано, иначе имя, с помощью
которого балы вызвана оболочка \fBtclsh\fR.
.TP 15
\fBtcl_interactive\fR
Содержит 1, если \fBtclsh\fR выполняется в интерактивном режиме
(\fIимяФайла\fR не было указано, и стандартный поток ввода является
терминальным устройством), иначе 0.

.SH PROMPTS
.PP
Когда оболочка \fBtclsh\fR запускается в интерактивном режиме, то
обычно она выдаёт в стандартный поток вывода приглашение ``\fB% \fR'',
Вы можете изменить приглашение, присвоив переменным \fBtcl_prompt1\fR
и \fBtcl_prompt2\fR соответствующие значения. Если переменная
\fBtcl_prompt1\fR существует, то она должна содержать Tcl скрипт,
печатающий приглашение, тогда вместо того, чтобы печатать приглашение
к вводу команд, \fBtclsh\fR выполнит скрипт, содержащийся в переменной
\fBtcl_prompt1\fR. Переменная \fBtcl_prompt2\fR используется похожим
образом в тех случаях, когда введён символ новой строки, но ввод
текущей команды ещё не окончен. Если переменная \fBtcl_prompt2\fR не
существует, но приглашение для незавершённых команд выводиться не
будет.

.SH "STANDARD CHANNELS"
.PP
За более подробными разъяснениями обратитесь к странице руководства
\fBTcl_StandardChannels\fR,

.SH "SEE ALSO"
fconfigure(n), tclvars(n)

.SH KEYWORDS
аргумент, интерпретатор, приглашение, скрипт, оболочка,
argument, interpreter, prompt, script file, shell
