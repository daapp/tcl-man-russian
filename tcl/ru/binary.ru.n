'\"
'\" Copyright (c) 1997 by Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: binary.ru.n,v 1.1.1.1 2003/10/16 19:01:11 alex Exp $
'\" 
.so man.macros
.TH binary n 8.0 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
binary \- Вставляет и извлекает поля из двоичных строк
.SH SYNOPSIS
\fBbinary format \fIстрокаФормата\fR ?\fIаргумент аргумент ...\fR?
.br
\fBbinary scan \fIстрока строкаФормата\fR ?\fIпеременная переменная ...\fR?
.BE

.SH DESCRIPTION
.PP
Эта команда предоставляет возможность манипуляции двоичными данными.
Первый вариант команды \fBbinary format\fR позволяет создать двоичную
строку из Tcl значений. Например, даны значения 16 и 22, на
тридцатидвухбитовой архитектуре, команда может создать восьмибайтовую
двоичную строку, состоящую из двух четырёхбайтовых целых чисел. Второй
вариант команды \fBbinary scan\fR производить обратную операцию -
извлекает из двоичной строки данные и возвращает их в виде обычных Tcl
строк.

.SH "BINARY FORMAT"
.PP
Команда \fBbinary format\fR создаёт двоичную строку, макет которой
указан с помощью аргумента \fIстрокаФормата\fR, а содержание
формируется из идущих следом аргументов. Команда возвращает созданное
двоичное значение.
.PP
Аргумент \fIстрокаФормата\fR представляет собой последовательность из
нуля или более спецификаторов полей, разделённых пробелами (нуль или
более). Каждый спецификатор поля состоит из одного символа, за которым
следует необязательное число - \fIcount\fR. Большинство спецификаторов
полей расходуют один \fIаргумент\fR для получения отформатированного
значения. Символ спецификатора указывает на то, каким образом будет
создано значение. Число \fIcount\fR обычно показывает, как много
объектов указанного типа берётся из значения. Если величина
\fIcount\fR указана, то оно должно быть неотрицательным десятичным
целым числом или *, что обычно означает необходимость использования
всего значения аргумента. Если количество \fIаргументов\fR не
совпадает с количеством полей в строке формата, то генерируется
ошибка.
.PP
Ниже приведён пример, вносящий ясность в отношения между
спецификаторами полей и аргументами:
.CS
\fBbinary format d3d {1.0 2.0 3.0 4.0} 0.1\fR
.CE
.PP
Первый аргумент - список из четырёх чисел, но так как в спецификаторе
поля (d3) указано число три, то только первые три числа из первого
аргумента будут использоваться. Второй аргумент ассоциирован со вторым
спецификатором поля (d). Получившаяся двоичная строка будет содержать
четыре числа: 1.0, 2.0, 3.0 и 0.1.
.PP
Каждая пара спецификатор\fIcount\fR двигает воображаемый курсор через
двоичные данные, сохраняет байты в текущей позиции и продвигает курсор
только после того, как последний байт был сохранён. Начальная позиция
курсора - 0, т.е. в начале данных. Тип может быть указан одним из
следующих символов:
.IP \fBa\fR 5
Сохраняет строку символов длиной \fIcount\fR в выходной строке. Если
\fIаргумент\fR содержит меньше чем \fIcount\fR байт, то для заполнения
поля до необходимой длины используются байты со значением нуль. Если
\fIаргумент\fR длиннее, чем указано в спецификаторе поля, то лишние
символы игнорируются. Если величина \fIcount\fR указана с помощью
символа *, то все байты \fIаргумента\fR будут отформатированы. Если
величина \fIcount\fR не указана, то отформатирован будет один символ.
Например команда:
.RS
.CS
\fBbinary format a7a*a alpha bravo charlie\fR
.CE
возвратит строку, эквивалентную \fBalpha\\000\\000bravoc\fR.
.RE
.IP \fBA\fR 5
Этот спецификатор поля аналогичен \fBa\fR, за исключением того, что
для заполнения недостающих символов используются пробелы, а не
нули. Например, команда:
.RS
.CS
\fBbinary format A6A*A alpha bravo charlie\fR
.CE
возвратит строку \fBalpha bravoc\fR.
.RE
.IP \fBb\fR 5
Создаёт строку, состоящую из \fIcount\fR двоичных цифр c порядком
следования младший-старший внутри каждого байта. \fIАргументы\fR
должны представлять собой последовательности символов 1 и 0.
Полученные байты располагаются в порядке первый-последний, при этом
биты образующие байт располагаются в порядке младший-старший. Если
соответствующий \fIаргумент\fR содержит меньше, чем \fIcount\fR цифр,
то вместо недостающих бит будут использоваться нули. Если
соответствующий \fIаргумент\fR содержит большее, чем \fIcount\fR
количество цифр, то лишние цифры игнорируются. Если величина
\fIcount\fR указана с помощью символа *, то все символы
\fIаргумента\fR будут отформатированы. Если количество форматируемых
битов не совпадает с размером байта, то недостающие биты последнего
байта будут равны нулю.  Например команда:
.RS
.CS
\fBbinary format b5b* 11100 111000011010\fR
.CE
возвратит строку эквивалентную \fB\\x07\\x87\\x05\fR.
.RE
.IP \fBB\fR 5
Этот спецификатор поля аналогичен \fBb\fR за исключением того, что
биты сохраняются в порядке старший-младший. Например,
.RS
.CS
\fBbinary format B5B* 11100 111000011010\fR
.CE
возвратит строку эквивалентную \fB\\xe0\\xe1\\xa0\fR.
.RE
.IP \fBh\fR 5
Сохраняет строку, содержащую \fIcount\fR шестнадцатеричных цифр в
порядке младший-старший внутри каждого байта выходной строки.
\fIАргумент\fR должен содержать последовательность символов из набора
``01234567890abcdefABCDEF''. Получившиеся байты попадают в
результирующую строку в порядке первый-последний, при этом
шестнадцатеричные цифры обрабатываются в порядке младший-старший
внутри каждого байта. Если \fIаргумент\fR содержит меньше \fIcount\fR
цифр, то для оставшихся цифр будет использоваться значение нуль. Если
\fIаргумент\fR содержит большее количество цифр, чем необходимо, то
оставшиеся цифры будут игнорированы. Если число \fIcount\fR указано с
помощью символа *, то все цифры \fIаргумента\fR будут отформатированы.
Если величина \fIcount\fR не указана, то будет использоваться только
одна цифра. Если количество цифр для форматирования не совпадает с
длиной байта, то недостающие биты будут иметь значение нуль. Например,
.RS
.CS
\fBbinary format h3h* AB def\fR
.CE
возвратит строку эквивалентную \fB\\xba\\x00\\xed\\x0f\fR.
.RE
.IP \fBH\fR 5
Этот спецификатор поля аналогичен \fBh\fR за исключением того, что
цифры сохраняются в порядке старший-младший для каждого байта.
Например,
.RS
.CS
\fBbinary format H3H* ab DEF\fR
.CE
возвратит строку эквивалентную \fB\\xab\\x00\\xde\\xf0\fR.
.RE
.IP \fBc\fR 5
Сохраняет один или более восьмибитовых значений в выходной строке.
Если величина \fIcount\fR не задана, то \fIаргумент\fR должен состоять
из целочисленного значения, иначе \fIаргумент\fR должен представлять
собой список, состоящий хотя бы из \fIcount\fR целочисленных
элементов. Младшие восемь бит каждого целого числа сохраняются как
однобайтовое значение в текущей позиции курсора. Если величина
\fIcount\fR указана с помощью символа *, то все целые числа в списке
будут отформатированы. Если количество элементов в списке меньше, чем
\fIcount\fR, то будет сгенерирована ошибка. Если количество элементов
в списке больше, чем \fIcount\fR то лишние элементы будут
проигнорированы. Например,
.RS
.CS
\fBbinary format c3cc* {3 -3 128 1} 260 {2 5}\fR
.CE
возвратит строку эквивалентную \fB\\x03\\xfd\\x80\\x04\\x02\\x05\fR,
тогда как
.CS
\fBbinary format c {2 5}\fR
.CE
сгенерирует ошибку.
.RE
.IP \fBs\fR 5
Этот спецификатор аналогичен \fBc\fR за исключением того, что
сохраняется одно или более шестнадцатибитовых целый чисел с порядком
байтов младший-старший (little-endian) в выходной строке. Младшие
шестнадцать бит каждого целого числа сохраняются как двухбайтовое
значение в текущей позиции курсора, при этом младший байт сохраняется
первым. Например,
.RS
.CS
\fBbinary format s3 {3 -3 258 1}\fR
.CE
возвратит строку эквивалентную \fB\\x03\\x00\\xfd\\xff\\x02\\x01\fR.
.RE
.IP \fBS\fR 5
Этот спецификатор поля аналогичен \fBs\fR за исключением того, что
шестнадцатибитовые целые числа сохраняются в выходной строке в порядке
старший-младший (big-endian). Например,
.RS
.CS
\fBbinary format S3 {3 -3 258 1}\fR
.CE
возвратит строку эквивалентную 
\fB\\x00\\x03\\xff\\xfd\\x01\\x02\fR.
.RE
.IP \fBi\fR 5
Этот спецификатор поля аналогичен \fBc\fR за исключением того, что он
сохраняет одно или более тридцатидвухбитовое целое число с порядком
байтов младший-старший в выходной строке. Младшие тридцать два бита
каждого целого числа сохраняются как четырёхбайтовое значение в
текущей позиции курсора, при этом младший байт сохраняется первым.
Например,
.RS
.CS
\fBbinary format i3 {3 -3 65536 1}\fR
.CE
возвратит строку эквивалентную 
\fB\\x03\\x00\\x00\\x00\\xfd\\xff\\xff\\xff\\x00\\x00\\x01\\x00\fR
.RE
.IP \fBI\fR 5
Этот спецификатор поля аналогичен \fBi\fR за исключением того, что одно
или более тридцатидвухбитовое целое число сохраняется в выходной строке с
порядком байтов старший-младший(big-endian). Например,
.RS
.CS
\fBbinary format I3 {3 -3 65536 1}\fR
.CE
возвратит строку эквивалентную 
\fB\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xfd\\x00\\x01\\x00\\x00\fR
.RE
.IP \fBw\fR 5
.VS 8.4
Этот спецификатор поля аналогичен \fBc\fR, за исключением того, что
одно или более шестидесятичетырёхбитовое целое число сохраняется в
выходной строке с порядком байтов младший-старший (little-endian).
Младшие шестьдесят четыре бита каждого целого числа сохраняются как
восьмибайтовое значение в текущей позиции курсора, при этом младший
байт сохраняется первым. Например,
.RS
.CS
\fBbinary format w 7810179016327718216\fR
.CE
возвратит строку эквивалентную 
\fBHelloTcl\fR
.RE
.IP \fBW\fR 5
Этот спецификатор поля аналогичен \fBw\fR за исключением того, что
одно или более шестидесятичетырёхбитовое целое число сохраняется в
выходной строке с порядком байтов старший-младший (big-endian).
Например,
.RS
.CS
\fBbinary format Wc 4785469626960341345 110\fR
.CE
возвратит строку эквивалентную 
\fBBigEndian\fR
.VE
.RE
.IP \fBf\fR 5
Этот спецификатор поля аналогичен \fBc\fR за исключением того, что
одно или более чисел с плавающей точкой одинарной точности сохраняется
в выходной строке в машинно-зависимом представлении. Это представление
не переносимо между архитектурами, и использоваться для передачи чисел
с плавающей точкой по сети не должно. Размер числа с плавающей точкой
может различаться для разных архитектур, так что количество
генерируемых байт может быть разным. Если значение превышает
допустимый для данной архитектуры порог, то используется величина
FLT_MAX для этой системы. Так как Tcl внутри использует числа двойной
точности, то в процессе преобразования в число одинарной точности
может произойти некоторая потеря точности. Например, в операционной
системе Windows, работающей на процессоре Intel Pentium команда
.RS
.CS
\fBbinary format f2 {1.6 3.4}\fR
.CE
возвратит строку эквивалентную 
\fB\\xcd\\xcc\\xcc\\x3f\\x9a\\x99\\x59\\x40\fR.
.RE
.IP \fBd\fR 5
Этот спецификатор поля аналогичен \fBf\fR за исключением того, что
одно или более чисел с плавающей точкой двойной точности сохраняется в
выходной строке в машинно-зависимом представлении. Например, в
операционной системе Windows, работающей на процессоре Intel Pentium
команда
.RS
.CS
\fBbinary format d1 {1.6}\fR
.CE
возвратит строку эквивалентную 
\fB\\x9a\\x99\\x99\\x99\\x99\\x99\\xf9\\x3f\fR.
.RE
.IP \fBx\fR 5
Сохраняет \fIcount\fR байт, равных нулю в выходной строке. Если
величина \fIcount\fR не указана, то сохраняется один байт, равный
нулю. Если величина \fIcount\fR указана с помощью символа *, то
генерируется ошибка. Этот спецификатор не расходует аргумент.
Например, команда
.RS
.CS
\fBbinary format a3xa3x2a3 abc def ghi\fR
.CE
возвратит строку эквивалентную 
\fBabc\\000def\\000\\000ghi\fR.
.RE
.IP \fBX\fR 5
Возвращает курсор в выходной строке назад на \fIcount\fR байт.  Если
величина \fIcount\fR указана с помощью символа * или больше, чем
значение текущей позиции курсора, то курсор будет установлен в позиции
0, таким образом следующим байт будет записан в первый байт
результирующей строки. Если величина \fIcount\fR не указана, то курсор
возвращается назад на один байт. Этот спецификатор не расходует
аргумент. Например, команда
.RS
.CS
\fBbinary format a3X*a3X2a3 abc def ghi\fR
.CE
возвратит \fBdghi\fR.
.RE
.IP \fB@\fR 5
Передвигает курсор в абсолютную позицию в выходной строке, указанную с
помощью \fIcount\fR. Позиция 0 соответствует первому байту в выходной
строке. Если \fIcount\fR указывает на позицию, находящуюся за
последним байтом строки, то неинициализированные позиции в строке
будут заполнены нулями и курсор будет установлен в необходимую
позицию.  Если величина \fIcount\fR указана с помощью символа *, то
курсор будет установлен в конец строки. Если длина \fIcount\fR не
указана, то будет сгенерирована ошибка. Этот спецификатор не расходует
\fIаргумент\fR. Например, команда
.RS
.CS
\fBbinary format a5@2a1@*a3@10a1 abcde f ghi j\fR
.CE
возвратит \fBabfdeghi\\000\\000j\fR.
.RE

.SH "BINARY SCAN"
.PP
Команда \fBbinary scan\fR извлекает поля из двоичных строк и
возвращает количество извлечённых полей. \fIСтрока\fR содержит данные
для извлечения, а \fIстрокаФормата\fR содержит указания о том, как
производить извлечение данных. Аргумент \fIпеременная\fR является
именем переменной, в которой сохраняется извлечённое из \fIстроки\fR
значение.
.PP
Как и в случае с \fBbinary format\fR, \fIстрокаФормата\fR представляет
собой последовательность из нуля или более спецификаторов полей,
разделённых пробелами (нуль или более). Каждый спецификатор поля
состоит из одного символа, за которым следует необязательное число -
\fIcount\fR. Большинство спецификаторов полей расходуют один
\fIаргумент\fR для получения имени переменной, в которой и будет
сохранено извлечённое из двоичной строки значение. Символ
спецификатора указывает на то, каким образом будут интерпретироваться
двоичные данные. Число \fIcount\fR обычно показывает, как много
объектов указанного типа берётся из значения. Если число \fIcount\fR
указано, то оно должно быть неотрицательным десятичным целым числом
или \fB*\fR, что обычно означает необходимость использования всего
значения строки данных. Если после текущей позиции курсора находится
недостаточное количество байт, то значение переменной, соответствующей
текущему спецификатору поля не изменяется, и команда \fBbinary scan\fR
немедленно завершается и возвращает количество изменённых переменных.
Если количество спецификаторов полей превышает количество имён
переменных, то генерируется ошибка.
.PP
Пример, похожий на тот, что приведён для команды \fBbinary format\fR,
поможет понять соответствие между спецификаторами полей и именами
переменных для подкоманды scan:
.CS
\fBbinary scan $bytes s3s first second\fR
.CE
.PP
Предположим, что переменная \fIbytes\fR содержит достаточно длинные
двоичные данные. Тогда вышеприведённая команда присваивает переменной
\fIfirst\fR список, состоящий из трёх целых шестнадцатибитовых чисел,
переменной \fIsecond\fR присваивается целое шестнадцатибитовое число.
Если переменная \fIbytes\fR содержит меньше восьми байт (т.е. четыре
двухбайтовых числа), то значение переменной \fIsecond\fR не
изменяется, если \fIbytes\fR содержит менее шести байт (т.е. три
двухбайтовых числа), то присваивание переменной \fIfirst\fR не
происходит. Отсюда следует, что команды:
.CS
\fBputs [binary scan abcdefg s3s first second]\fR
\fBputs $first\fR
\fBputs $second\fR
.CE
напечатают (при условии что переменные \fIfirst\fR и \fIsecond\fR не
были перед этим инициализированы) следующие строки:
.CS
\fB1\fR
\fB25185 25699 26213\fR
\fIcan't read "second": no such variable\fR
.CE
.PP
\fIВажное\fR замечание: значения, извлекаемые с помощью спецификаторов
\fIc\fR, \fIs\fR и \fIS\fR (а также \fIi\fR и \fII\fR на
шестидесятичетырёхбитовых платформах) преобразуются к типу данных
long. Причём, значения с установленным старшим битом (0x80 для типа
данных char, 0x8000 для short, 0x80000000 для int) будут расширенны:
.CS
\fBset signShort [binary format s1 0x8000]\fR
\fBbinary scan $signShort s1 val; \fI# val == 0xFFFF8000\fR
.CE
Если вам необходимо беззнаковое значение, то вы можете маскировать
полученное значение до необходимого размера. Например, для получения
значения типа unsigned shoft необходимо выполнить следующую команду:
.CS
\fBset val [expr {$val & 0xFFFF}]; \fI# val == 0x8000\fR
.CE
.PP
Каждая пара спецификатор\fIcount\fR двигает воображаемый курсор через
двоичные данные и читает байты из текущей позиции. Начальная позиция
курсора - 0, т.е. в начале данных.  Тип может быть указан одним из
следующих символов:
.IP \fBa\fR 5
Данные - строка символов длиной \fIcount\fR. Если величина \fIcount\fR
указана с помощью символа *, то все оставшиеся байты из аргумента
\fIстрока\fR будут помещены в переменную. Если величина \fIcount\fR не
указана, то будет сканирован только один символ. Например,
.RS
.CS
\fBbinary scan abcde\\000fghi a6a10 var1 var2\fR
.CE
возвратит \fB1\fR, при этом переменная \fBvar1\fR будет содержать
строку, эквивалентную \fBabcde\\000\fR, а значение переменной
\fBvar2\fR не будет изменено.
.RE
.IP \fBA\fR 5
Этот спецификатор поля аналогичен \fBa\fR, за исключением того, что
хвостовые пробельные символы и нуль-символы не будут сохранены в
соответствующей переменной. Например, команда
.RS
.CS
\fBbinary scan "abc efghi  \\000" A* var1\fR
.CE
возвратит \fB1\fR, при этом  переменная \fBvar1\fR будет содержать
значение \fBabc efghi\fR.
.RE
.IP \fBb\fR 5
Данные преобразуются в строку, состоящую из \fIcount\fR двоичных цифр
в порядке младший-старший и представляющую собой последовательность
символов ``1'' и ``0''. Байты данных сканируются в порядке от первого
к последнему, при этом биты используются в порядке от младшего к
старшему внутри каждого байта. Любые дополнительные биты в последнем
байте игнорируются. Если величина \fIcount\fR указана с помощью
символа *, то все оставшиеся биты из аргумента \fIстрока\fR
отсканированы. Если величина \fIcount\fR не указана, то будет
сканирован только один бит. Например, команда
.CS
\fBbinary scan \\x07\\x87\\x05 b5b* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB11100\fR, а переменная \fBvar2\fR будет содержать значение
\fB1110000110100000\fR.
.RE
.IP \fBB\fR 5
Этот спецификатор поля аналогичен \fBb\fR, за исключением того, что 
биты используются в порядке старший-младший внутри каждого байта.
Например, команда
.RS
.CS
\fBbinary scan \\x70\\x87\\x05 B5B* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать значение
\fB01110\fR, а переменная \fBvar2\fR будет содержать значение
\fB1000011100000101\fR.
.RE
.IP \fBh\fR 5
Данные преобразуются в строку, состоящую из \fIcount\fR
шестнадцатеричных цифр в порядке младший-старший и представляющую
собой последовательность символов из набора ``0123456789abcdef''. Байты
данных сканируются в порядке от первого к последнему, при этом
шестнадцатеричные цифры используются в порядке младший-старший внутри
каждого байта. Любые лишние биты в последнем байте игнорируются. Если
величина \fIcount\fR указана с помощью символа *, то все оставшиеся
шестнадцатеричные цифры из аргумента \fIстрока\fR отсканированы. Если
величина \fIcount\fR не указана, то будет сканирован только одна
шестнадцатеричная цифра. Например, команда
.RS
.CS
\fBbinary scan \\x07\\x86\\x05 h3h* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB706\fR, а переменная \fBvar2\fR будет содержать значение
\fB50\fR.
.RE
.IP \fBH\fR 5
Этот спецификатор поля аналогичен \fBH\fR, за исключением того, что
внутри каждого байта используется порядок цифр старший-младший.
Например, команда
.RS
.CS
\fBbinary scan \\x07\\x86\\x05 H3H* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB078\fR, а переменная \fBvar2\fR будет содержать значение
\fB05\fR.
.RE
.IP \fBc\fR 5
Данные преобразуются в \fIcount\fR восьмибитовых целых чисел со знаком
и сохраняются в соответствующей переменной как список. Если величина
\fIcount\fR указана с помощью символа *, то все оставшиеся байты в
аргументе \fIстрока\fR будут отсканированы. Если величина \fIcount\fR
не указана, то будет сканирован только одно восьмибитовое целое число.
Например, команда
.RS
.CS
\fBbinary scan \\x07\\x86\\x05 c2c* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB7 -122\fR, а переменная \fBvar2\fR будет содержать
значение \fB5\fR. Заметьте, что целые числа имеют знак, но могут быть
преобразованы в беззнаковые восьмибитовые числа с помощью следующего
выражения:
.CS
\fBexpr ( $num + 0x100 ) % 0x100\fR
.CE
.RE
.IP \fBs\fR 5
Данные интерпретируются как \fIcount\fR шестнадцатибитовые целые числа
со знаком с порядком байтов младший-старший (little-endian). Целые
числа сохраняются в соответствующей переменной как список. Если
величина \fIcount\fR указана с помощью символа *, то все оставшиеся
байты в аргументе \fIстрока\fR будут отсканированы. Если величина
\fIcount\fR не указана, то будет отсканировано одно шестнадцатибитовое
целое число. Например, команда
.RS
.CS
\fBbinary scan \\x05\\x00\\x07\\x00\\xf0\\xff s2s* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB5 7\fR, а переменная \fBvar2\fR будет содержать значение
\fB-16\fR. Заметьте, что целые числа имеют знак, но могут быть
преобразованы в беззнаковые шестнадцатибитовые числа с помощью
следующего выражения:
.CS
\fBexpr ( $num + 0x10000 ) % 0x10000\fR
.CE
.RE
.IP \fBS\fR 5
Этот спецификатор поля аналогичен \fBs\fR, за исключением того, что
данные интерпретируются как \fIcount\fR шестнадцатибитовых целых чисел
со знаком с порядком байтов старший-младший (big-endian).
Например, команда
.RS
.CS
\fBbinary scan \\x00\\x05\\x00\\x07\\xff\\xf0 S2S* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB5 7\fR, а переменная \fBvar2\fR будет содержать значение
\fB-16\fR.
.RE
.IP \fBi\fR 5
Данные интерпретируются как \fIcount\fR тридцатидвухбитовых целых
чисел со знаком с порядком байтов младший-старший (little-endian).
Целые числа сохраняются в соответствующей переменной как список.  Если
величина \fIcount\fR указана с помощью символа *, то все оставшиеся
байты из аргумента \fIстрока\fR будут отсканированы. Если величина
\fIcount\fR не указана, то будет отсканировано одно
тридцатидвухбитовое целое число. Например, команда
.RS
.CS
\fBbinary scan \\x05\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\xf0\\xff\\xff\\xff i2i* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB5 7\fR, а переменная \fBvar2\fR будет содержать значение
\fB-16\fR. Заметьте, что целые числа имеют знак и не могут быть
представлены интерпретатором Tcl как беззнаковые значения.
.RE
.IP \fBI\fR 5
Этот спецификатор поля аналогичен \fBI\fR, за исключением того, что
данные интерпретируются как \fIcount\fR целых чисел со знаком с
порядком байтов старший-младший (big-endian). Например, команда
.RS
.CS
\fBbinary scan \\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xf0 I2I* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB5 7\fR, а переменная \fBvar2\fR будет содержать значение
\fB-16\fR.
.RE
.IP \fBw\fR 5
.VS 8.4
Данные интерпретируются как \fIcount\fR шестидесятичетырёхбитовых
целых чисел со знаком с порядком байтов младший-старший
(little-endian). Целые числа сохраняются в соответствующей переменной
как список. Если величина \fIcount\fR указана с помощью символа *, то
все оставшиеся байты будут отсканированы. Если величина \fIcount\fR не
указана, то будет отсканировано одно шестидесятичетырёхбитовое
число. Например, команда
.RS
.CS
\fBbinary scan \\x05\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\xf0\\xff\\xff\\xff wi* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB30064771077\fR, а переменная \fBvar2\fR будет содержать
значение \fB-16\fR. Заметьте, что целые числа имеют знак и не могут
быть представлены интерпретатором Tcl как беззнаковые значения.
.RE
.IP \fBW\fR 5
Этот спецификатор поля аналогичен \fBw\fR за исключением того, что
данные интерпретируются как \fIcount\fR шестидесятичетырёхбитовых
целых чисел с порядком знаком старший-младший (big-endian). Например,
команда
.RS
.CS
\fBbinary scan \\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xf0 WI* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB21474836487\fR, а переменная \fBvar2\fR будет содержать
значение \fB-16\fR.
.VE
.RE
.IP \fBf\fR 5
Данные интерпретируются как \fIcount\fR чисел с плавающей точкой
одинарной точности в машинно-зависимом представлении. Числа с
плавающей сохраняются в соответствующей переменной как список. Если
величина \fIcount\fR указана с помощью символа *, то все оставшиеся
байты будут отсканированы. Если величина \fIcount\fR не указана, то
будет отсканировано одно число с плавающей точкой.  Размер числа с
плавающей точкой может отличаться на разных архитектурах, т.е.
количество сканируемых байт может быть разным. Если данные не
являются представлением числа с плавающей точкой, то результат может
иметь неопределённой значение и зависеть от компилятора.  Например, в
операционной системе Windows, работающей на процессоре Intel Pentium
команда
.RS
.CS
\fBbinary scan \\x3f\\xcc\\xcc\\xcd f var1\fR
.CE
возвратит \fB1\fR, при этом переменная \fBvar1\fR будет иметь значение
\fB1.6000000238418579\fR.
.RE
.IP \fBd\fR 5
Этот спецификатор поля аналогичен \fBf\fR, за исключением того, что
данные интерпретируются как \fIcount\fR чисел с плавающей точкой
двойной точности в машинно-зависимом формате. Например, в операционной
системе Windows, работающей на процессоре Intel Pentium команда
.RS
.CS
\fBbinary scan \\x9a\\x99\\x99\\x99\\x99\\x99\\xf9\\x3f d var1\fR
.CE
возвратит \fB1\fR, при этом переменная \fBvar1\fR будет иметь значение 
\fB1.6000000000000001\fR.
.RE
.IP \fBx\fR 5
Передвигает курсор в \fIстроке\fR вперёд на \fIcount\fR байт. Если
величина \fIcount\fR указана с помощью символа * или больше, чем
количество байт в строке после текущей позиции курсора, то курсор
устанавливается после последнего байта в \fIстроке\fR. Если величина
\fIcount\fR не указана, то курсор передвигается на один байт вперёд.
Этот спецификатор не расходует аргумент. Например, команда
.RS
.CS
\fBbinary scan \\x01\\x02\\x03\\x04 x2H* var1\fR
.CE
возвратит \fB1\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB0304\fR.
.RE
.IP \fBX\fR 5
Передвигает курсор в \fIстроке\fR назад на \fIcount\fR байт.  Если
величина \fIcount\fR указана с помощью символа * или больше текущей
позиции курсора, то курсор устанавливается в позицию 0, т.е. следующий
сканируемый байт будет первым байтом в \fIстроке\fR. Если величина
\fIcount\fR не указана, то курсор передвигается на один байт назад.
Этот спецификатор не расходует аргумент. Например, команда
.RS
.CS
\fBbinary scan \\x01\\x02\\x03\\x04 c2XH* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB1 2\fR, а переменная \fBvar2\fR будет содержать значение
\fB020304\fR
.RE
.IP \fB@\fR 5
Передвигает курсор в абсолютную позицию, указанную с помощью
\fIcount\fR, в строке данных. Позиция 0 соответствует первому байту в
\fIстроке\fR. Если \fIcount\fR указывает на позицию, находящуюся за
последним байтом в строке, то курсор устанавливается после последнего
байта. Если величина \fIcount\fR не указана, то генерируется ошибка.
Например, команда
.RS
.CS
\fBbinary scan \\x01\\x02\\x03\\x04 c2@1H* var1 var2\fR
.CE
возвратит \fB2\fR, при этом переменная \fBvar1\fR будет содержать
значение \fB1 2\fR, а переменная \fBvar2\fR будет содержать значение
\fB020304\fR.
.RE

.SH "PLATFORM ISSUES"
Иногда необходимо форматировать или сканировать целочисленные значения
с порядком байтов характерным для машины. Элемент массива
\fBtcl_platform\fR с индексом \fBbyteOrder\fR поможет выбрать тип
спецификатора для сканирования или распознавания целых чисел.

.SH "SEE ALSO"
format(n), scan(n), tclvars(n)

.SH KEYWORDS
двоичный, форматировать, сканировать, binary, format, scan
