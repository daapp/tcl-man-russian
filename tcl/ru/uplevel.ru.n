'\"
'\" Copyright (c) 1993 The Regents of the University of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: uplevel.ru.n,v 1.1 2004/04/25 08:34:33 alex Exp $
'\" 
.so man.macros
.TH uplevel n "" Tcl "Tcl Встроенные Команды"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
uplevel \- Выполняет скрипт на другом уровне стека
.SH SYNOPSIS
\fBuplevel \fR?\fIуровень\fR?\fI аргумент \fR?\fIаргумент ...\fR?
.BE

.SH DESCRIPTION
.PP
Все \fIаргументы\fR объединятся таким образом, как если они были
переданы команде \fBconcat\fR, затем результат объединения выполняется
в изменённом контексте, указанном с помощью параметра \fIуровень\fR.
\fBUplevel\fR возвращает результат выполнения скрипта.
.PP
Если значением аргумента \fIуровень\fR является целое число, то оно
указывает на сколько уровней стека выше текущего необходимо
переместиться перед тем, как выполнить команду. Если аргумент
\fIуровень\fR состоит из символа \fB#\fR за которым следует число, то
это число указывает на абсолютный уровень стека. Если аргумент
\fIуровень\fR не указан, то по умолчанию используется значение
1. Аргумент \fIуровень\fR должен быть указан, если первый из
\fIаргументов\fR начинается с цифры или символа \fB#\fR.
.PP
Например, предположим, что процедура \fBa\fR была вызвана на самом
верхнем уровне, из неё вызвана процедура \fBb\fR, а из \fBb\fR, в свою
очередь, вызвана процедура \fBc\fR. Предположим что из процедуры
\fBc\fR вызвана команда \fBuplevel\fR. Если аргумент \fIуровень\fR
равен \fB1\fR или \fB#2\fR или не указан вовсе, то команда будет
выполнена в контексте переменных процедуры \fBb\fR. Если аргумент
\fBуровень\fR равен \fB2\fR или \fB#1\fR, то команда будет выполнена в
контексте переменных процедуры \fBa\fR. Если \fIуровень\fR равен
\fB3\fR или \fB#0\fR, то команда будет выполнена на самом верхнем
уровне (будут доступны только глобальные переменные).
.PP
Команда \fBuplevel\fR временно делает недоступным уровень стека
вызывающей процедуры, до тех пор, пока выполняется
команда. Предположим из процедуры \fBc\fR вызывается команда
.CS
\fBuplevel 1 {set x 43; d}\fR
.CE
где \fBd\fR - ещё одна Tcl процедура. Команда \fBset\fR изменит
переменную \fBx\fR в контексте процедуры \fBb\fR, и процедура \fBd\fR
будет вызвана на уровне 3, как если бы она была вызвана из процедура
\fBb\fR. Если из процедуры \fBd\fR выполнить в свою очередь команду
.CS
\fBuplevel {set x 42}\fR
.CE
то команда \fBset\fR изменит значение той же самой переменной \fBx\fR
в контексте процедуры \fBb\fR, но при этом в стеке не будет виден
контекст переменных процедуры \fBc\fR во время выполнения процедуры
\fBd\fR. Для определения текущего контекста может использоваться
команда ``\fBinfo level\fR''.
.PP
Команда \fBuplevel\fR делает возможным использование Tcl процедур в
качестве новых управляющих конструкций (например, \fBuplevel\fR может
использоваться для создания Tcl процедуры обеспечивающей
функциональность команды \fBwhile\fR)
.PP
\fBnamespace eval\fR представляет собой другой путь (помимо вызовов
процедур) для изменения контекста имён в Tcl. Эта команда добавляет
уровень представляющий пространство имён в стек. Это означает, что
каждую команду \fBnamespace eval\fR надо считать дополнительным
уровнем в стеке при вызове команд \fBuplevel\fR и \fBupvar\fR.
Например, \fBinfo level 1\fR возвратит список, описывающий процедуру
или команду \fBnamespace eval\fR, выполняющуюся на самом верхнем
уровне.  Команда \fBuplevel #0\fR выполняет на самом верхнем уровне в
самом верхнем пространстве имён (в глобальном пространстве имён).

.SH "SEE ALSO"
namespace(n), upvar(n)

.SH KEYWORDS
контекст, уровень, пространство имён, уровень стека, переменные,
context, level, namespace, stack frame, variables
