'\"
'\" Copyright (c) 1993 The Regents of the University of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" CVS: @(#) $Id: Tcl.ru.n,v 1.1.1.1 2003/10/16 19:01:11 alex Exp $
'\"
.so man.macros
.TH "Tcl" n "8.1" Tcl "Tcl Встроенные Команды"
.BS
.SH NAME
Tcl \- Tool Command Language
.SH SYNOPSYS
Краткое изложение синтаксиса языка Tcl.
.BE

.SH DESCRIPTION
.PP
Следующие правила определяют синтаксис и семантику языка Tcl.
.IP "[1] \fBКоманды.\fR"
Скрипт на Tcl представляет собой строку, содержащую одну или более
команд. Символы точки с запятой и новой строки являются
разделителями команд, если не находятся в кавычках как описано
ниже. Закрывающие квадратные скобки являются окончанием команды в течении
подстановки команд(см. ниже), если не находятся в кавычках.
.IP "[2] \fBВычисление.\fR"
Команда обрабатывается в два шага. На первом шаге интерпретатор Tcl
разбивает команду на \fIслова\fR и выполняет подстановки, как
рассказывается ниже. Эти подстановки выполняются одинаковым образом
для всех команд. Первое слово используется для определения командной
процедуры, выполняющей команду, после этого все слова команды
передаются командной процедуре. Командная процедура свободна в
интерпретации каждого слова таким образом, каким она захочет: как
число, имя переменной, список или Tcl скрипт. Разные команды
интерпретируют свои слова по-разному.
.IP "[3] \fBСлова.\fR"
Слова команды разделяются пробельными символами(исключая символ новой
строки, который является разделителем команд).
.IP "[4] \fBДвойные кавычки.\fR"
Если первым символом слова является двойная кавычка (``"''),
тогда концом слова считается также двойная кавычка. Если точка с
запятой, закрывающая скобка или пробельный символ(включая символ новой
строки) появляется между двойными кавычками, тогда они рассматриваются
как обычные символы и включаются в слово. Подстановки команд,
переменных и последовательностей с обратным слэшем
выполняются на символах в двойных кавычках как описано
ниже. Сами кавычки не используются как часть слова.
.IP "[5] \fBФигурные скобки.\fR"
Если первым символом слова является открывающая фигурная
скобка(``{''), то концом слова считается закрывающая фигурная
скобка(``}''). Фигурные скобки могут быть вложены в слово, при
этом для каждой открывающей фигурной скобки должна быть соответствующая
закрывающая (однако, если открывающая или закрывающая фигурная скобка
предварена обратным слэшем, то она не учитывается при поиске парной
скобки). Подстановки не производятся для символов внутри фигурных
скобок, исключая подстановку ``обратный слэш-новая строка'', описанную
ниже, ни точка с запятой, ни символ новой строки, ни закрывающая
квадратная скобка или пробельный символ специально не
интерпретируются. Слово будет состоять только из символов, находящихся
между фигурными скобками, исключая сами скобки.
.IP "[6] \fBКомандная подстановка\fR"
Если слово содержит открывающую квадратную скобку (``[''),
тогда Tcl выполняет \fIподстановку команды\fR. Для этого он
рекурсивно вызывает Tcl интерпретатор, для обработки символов,
следующих за открывающей фигурной скобкой, как Tcl скрипт. Скрипт
может содержать любое количество команд и должен заканчиваться
закрывающей квадратной скобкой(``]''). Результат
скрипта(т.е. результат последней команды) подставляется в слово на
место фигурных скобок и всех символов между ними. В одном слове может
быть любое количество командных подстановок. Командная подстановка не
выполняется в словах, заключённых в фигурные скобки.
.IP "[7] \fBПодстановка переменной\fR"
Если слово содержит символ доллара (``$''), тогда Tcl
выполнит \fIподстановку переменной\fR: символ доллара и следующие за ним
символы заменяются в слове на значение переменной. Подстановка
переменной может принимать одну из следующих форм:
.RS
.TP 15
\fB$\fIname\fR
\fIName\fR - имя скалярной переменной; name - это последовательность
одного или более символов, являющихся буквой, цифрой, символом
подчёркивания или разделителем пространства имён(два или более
двоеточий).
.TP 15
\fB$\fIname\fB(\fIindex\fB)\fR
\fIName\fR - имя переменной массива, а \fIindex\fR - имя элемента
внутри массива. \fIName\fR может содержать только буквы, цифры, символы
подчёркивания и разделители пространства имён, а также может быть
пустой строкой. Командные подстановки, подстановки переменный и
подстановки с обратным слэшем выполняются для символов \fIindex\fR.
.TP 15
\fB${\fIname\fB}\fR
\fIName\fR - имя скалярной переменной. Оно может содержать любые
символы, исключая закрывающую фигурную скобку.
.LP
В одном слове может быть любое количество подстановок
переменных. Подстановки переменных не выполняются для слов,
заключённых в фигурные скобки.
.RE
.IP "[8] \fBПодстановка с обратным слэшем\fR"
Если обратный слэш (``\e'') появляется в слове, то
выполняется \fIподстановка с обратным слэшем\fR. Во всех случаях, кроме
ниже перечисленных, обратных слэш отбрасывается и следующий символ
обрабатывается как обычный символ и включается в слово. Это позволяет
таким символам, как двойные кавычки, закрывающие квадратные скобки и
символы доллара, быть включёнными в слово без специальной обработки. В
нижеследующей таблице показаны последовательности с обратным слэшем,
которые обрабатываются специальным образом, вместе с подставляемыми
значениями.
.RS
.TP 7
\e\fBa\fR
Звуковой сигнал(гудок) (0x7).
.TP 7
\e\fBb\fR
Сдвиг на одну позицию влево (0x8).
.TP 7
\e\fBf\fR
Прогон страницы (0xc).
.TP 7
\e\fBn\fR
Новая строка (0xa).
.TP 7
\\\fBr\fR
Возврат каретки (0xd).
.TP 7
\e\fBt\fR
Табуляция (0x9).
.TP 7
\e\fBv\fR
Вертикальная табуляция (0xb).
.TP
\e\fB<newline>\fIпробел\fR
.
Один пробельный символ заменяет обратный слэш, символ новой строки и
все пробелы и табуляторы после символа новой строки. Эта
последовательность уникальна в том, что она замещается в отдельном
препроходе, перед тем, как команда анализируется. Это значит, что
последовательность будет замещена даже в фигурных скобках, и
результирующий пробел будет рассматриваться как разделитель слов если
только он не будет находится между фигурными скобками или двойными
кавычками.
.TP 7
\e\e
Обратный слэш (``\e'')
.VS 8.1 br
.TP 7
\e\fIooo\fR
.
Цифры \fIooo\fR (одна, две или три) дают восьмибитовое восьмеричное
значение символа из набора Unicode, которое и будет вставлено. Верхние
биты символа из набора Unicode будут равны 0.
.TP 7
\e\fBx\fIhh\fR
.
Шестнадцатеричные цифры \fIhh\fR дают восьмибитовое шестнадцатеричное
значение для символа Unicode, которое и будет вставлено. Любое
количество шестнадцатеричных цифр может присутствовать, однако все
кроме двух последних будут игнорированны (результат всегда
однобайтовый). Верхние биты символа из набора Unicode будут равны 0.
.TP 7
\e\fBu\fIhhhh\fR
.
Шестнадцатеричные цифры \fIhhhh\fR (одна, две, три или четыре) дают
шестнадцатибитовое значение для символа Unicode, которое и будет
вставлено.
.VE
.LP
Подстановки с обратным слэшем не выполняются со словами, заключёнными
в фигурные скобки, исключение составляет подстановка ``обратный
слэш-новая строка'' как рассказано выше.
.RE
.IP "[9] \fBКомментарии\fR"
Если символ хэша (``#'') появляется в месте, где Tcl ожидает
первый символ первого слова команды, тогда хэш символ и символы,
следующие за ним до конца строки рассматриваются как комментарии и
игнорируются. Символ комментария имеет значение только если он
появляется в начале команды.
.IP "[10]\fBПорядок подстановок\fR"
Каждый символ обрабатывается только один раз Tcl интерпретатором как
часть создания слова команды. Например, если происходит подстановка
переменной, то никаких других подстановок над значением переменной не
производится, значение вставляется в слово без изменений. Если
происходит командная подстановка, то вложенные команды обрабатываются
полностью с помощью рекурсивного вызова интерпретатора Tcl, никаких
подстановок перед рекурсивным вызовом не производится и не
производится никаких дополнительных подстановок над результатом
выполнения скрипта.
.RS
.LP
Подстановки производятся слева направо, выполнение следующей
подстановки производится только после завершения предыдущей. Таким
образом, последовательность команд
.CS
set y [set x 0][incr x][incr x]
.CE
всегда будет присваивать переменной \fIy\fR значение \fI012\fR.
.RE
.IP "[11] \fBПодстановки и границы слов\fR"
Подстановки не затрагивают границы слов команды. Например, в течении
подстановки переменной всё значение переменной становится частью
одного слова, даже если значение переменной содержит пробелы.
