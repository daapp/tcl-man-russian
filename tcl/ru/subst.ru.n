'\"
'\" Copyright (c) 1994 The Regents of the University of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2001 Donal K. Fellows
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: subst.n,v 1.1.1.1 2003/10/16 19:01:11 alex Exp $
'\" 
.so man.macros
.TH subst n 7.4 Tcl "Tcl Встроенные Команды"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
subst \- Выполняет подстановки с обратным слэшем, команд и переменных.

.SH SYNOPSIS
\fBsubst \fR?\fB\-nobackslashes\fR? ?\fB\-nocommands\fR? ?\fB\-novariables\fR? \fIстрока\fR
.BE

.SH DESCRIPTION
.PP
Эта команда производит подстановки переменных, команд и
последовательностей с обратным слэшем над аргументом \fIстрока\fR и
возвращает строку со всеми выполненными подстановками.
Подстановки производятся точно таким же образом, как и для команд Tcl.
В результате подстановки в \fIстроке\fR производятся дважды: первый
раз анализатор Tcl производит обычные подстановки, как и для всех
других команд, второй раз подстановки производятся командой \fIsubst\fR
.PP
Опции \fB\-nobackslashes\fR, \fB\-nocommands\fR и
\fB\-novariables\fR, в случае их использования, отменяют
подстановки с обратным слэшем, команд и переменных соответственно.
Например, в случае использования опции \fB-nocommand\fR, подстановки
команд не производятся, и квадратные скобки рассматриваются как
обычные символы и никак более не интерпретируются.
.PP
.VS 8.4
Обратите внимание, что подстановки одного вида могут включать в себя
подстановки другого вида. Например, даже если указана опция
\fB-novariables\fR, подстановки команд будут производиться без
ограничений. Это означает, что будет произведена любая подстановка
переменной необходимая для завершения командной подстановки. В свою
очередь, любая командная подстановка, необходимая для завершения
подстановки переменной также будет произведена, даже если указана
опция \fB-nocommands\fR. См. раздел EXAMPLES ниже.
.PP
Если во время подстановки произошла ошибка, то команда \fBsubst\fR
возвратит эту ошибку. Если во время подстановки команды или переменной
возникла исключительная ситуация всвязи с выполнением команды
\fBbreak\fR, то результатом всей подстановки будет строка с уже
выполненными подстановками до начала подстановки, спровоцировавшей
исключительную ситуацию. Если во время подстановки команды или переменной
возникла исключительная ситуация всвязи с выполнением команды
\fBcontinue\fR, 
If an error occurs during substitution, then \fBsubst\fR will return
that error.  If a break exception occurs during command or variable
substitution, the result of the whole substitution will be the
string (as substituted) up to the start of the substitution that
raised the exception.  If a continue exception occurs during the
evaluation of a command or variable substitution, an empty string
will be substituted for that entire command or variable substitution
(as long as it is well-formed Tcl.)  If a return exception occurs,
or any other return code is returned during command or variable
substitution, then the returned value is substituted for that
substitution.  See the EXAMPLES below.  In this way, all exceptional
return codes are ``caught'' by \fBsubst\fR.  The \fBsubst\fR command
itself will either return an error, or will complete successfully.
.VE
.SH EXAMPLES
.PP
When it performs its substitutions, \fIsubst\fR does not give any
special treatment to double quotes or curly braces (except within
command substitutions) so the script
.CS
\fBset a 44
subst {xyz {$a}}\fR
.CE
returns ``\fBxyz {44}\fR'', not ``\fBxyz {$a}\fR''
.VS 8.4
and the script
.CS
\fBset a "p\\} q \\{r"
subst {xyz {$a}}\fR
.CE
return ``\fBxyz {p} q {r}\fR'', not ``\fBxyz {p\\} q \\{r}\fR''.
.PP
When command substitution is performed, it includes any variable
substitution necessary to evaluate the script.  
.CS
\fBset a 44
subst -novariables {$a [format $a]}\fR
.CE
returns ``\fB$a 44\fR'', not ``\fB$a $a\fR''.  Similarly, when
variable substitution is performed, it includes any command
substitution necessary to retrieve the value of the variable.
.CS
\fBproc b {} {return c}
array set a {c c [b] tricky}
subst -nocommands {[b] $a([b])}\fR
.CE
returns ``\fB[b] c\fR'', not ``\fB[b] tricky\fR''.
.PP
The continue and break exceptions allow command substitutions to
prevent substitution of the rest of the command substitution and the
rest of \fIstring\fR respectively, giving script authors more options
when processing text using \fIsubst\fR.  For example, the script
.CS
\fBsubst {abc,[break],def}\fR
.CE
returns ``\fBabc,\fR'', not ``\fBabc,,def\fR'' and the script
.CS
\fBsubst {abc,[continue;expr 1+2],def}\fR
.CE
returns ``\fBabc,,def\fR'', not ``\fBabc,3,def\fR''.
.PP
Other exceptional return codes substitute the returned value
.CS
\fBsubst {abc,[return foo;expr 1+2],def}\fR
.CE
returns ``\fBabc,foo,def\fR'', not ``\fBabc,3,def\fR'' and
.CS
\fBsubst {abc,[return -code 10 foo;expr 1+2],def}\fR
.CE
also returns ``\fBabc,foo,def\fR'', not ``\fBabc,3,def\fR''.
.VE

.SH "SEE ALSO"
Tcl(n), eval(n), break(n), continue(n)

.SH KEYWORDS
backslash substitution, command substitution, variable substitution
