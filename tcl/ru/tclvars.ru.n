'\"
'\" Copyright (c) 1993 The Regents of the University of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: tclvars.ru.n,v 1.4 2004/06/07 19:54:11 alex Exp $
'\" 
.so man.macros
.TH tclvars n 8.0 Tcl "Tcl Встроенные Команды"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
tclvars \- Переменные, используемые Tcl
.BE

.SH DESCRIPTION
.PP
Нижеперечисленные глобальные переменные автоматически создаются и
управляются библиотекой Tcl. За небольшим исключением, отдельно
оговорённым ниже, эти переменные должны рассматриваться, как
неизменяемые кодом приложения и пользователями.
.TP
\fBenv\fR
Эта переменная Tcl является массивом, элементы которого являются
переменными окружения процесса. Чтение элементов массива позволяет
узнать значение соответствующей переменной окружения.
Присвоение значения элементу массива изменяет соответствующую
переменную окружения или создаёт новую, если таковая ещё не существует.
Удаление элемента массива \fBenv\fR удаляет соответствующую переменную
окружения.
Изменение массива \fBenv\fR оказывает влияние на окружение дочерних
процессов, созданных командой \fBexec\fR. Если из массива \fBenv\fR
удаляются все элементы, то Tcl перестаёт отслеживать доступ к этому
массиву и не обновляет переменные окружения.
.RS
.VS 8.0 
В ОС Windows имена переменных окружения PATH и COMSPEC всегда
преобразуются в верхний регистр. Например, переменная PATH может быть
экспортирована операционной системой как ``path'', ``Path'', ``PaTh''
и т.д., causing otherwise simple Tcl code to have to
support many special cases. Все другие переменные окружения
наследуются Tcl в неизменном виде. Присвоение массиву \fBenv\fR
пустого списка (array set env {}) равносильно удалению этой переменной 
'\" fix it !!!
All other environment variables inherited by
Tcl are left unmodified.  Setting an env array variable to blank is the
same as unsetting it as this is the behavior of the underlying Windows OS.
It should be noted that relying on an existing and empty environment variable
won't work on windows and is discouraged for cross-platform usage.
.VE
.RE
.RS
На платформе Macintosh переменные окружения создаются интерпретатором
Tcl как для этой платформы нет глобальных переменных окружения. Tcl
создаёт следующие переменные окружения:
.TP
\fBLOGIN\fR
Эта переменная содержит Chooser name of the Macintosh.
.TP
\fBUSER\fR
This also holds the Chooser name of the Macintosh.
.TP
\fBSYS_FOLDER\fR
Путь к системному каталогу.
.TP
\fBAPPLE_M_FOLDER\fR
Путь к каталогу Apple Menu.
.TP
\fBCP_FOLDER\fR
Путь к каталогу панели управления.
.TP
\fBDESK_FOLDER\fR
The path to the desk top directory.
.TP
\fBEXT_FOLDER\fR
The path to the system extensions directory.
.TP
\fBPREF_FOLDER\fR
Путь к каталогу с настройками.
.TP
\fBPRINT_MON_FOLDER\fR
Путь к каталогу монитора печати.
.TP
\fBSHARED_TRASH_FOLDER\fR
The path to the network trash directory.
.TP
\fBTRASH_FOLDER\fR
The path to the trash directory.
.TP
\fBSTART_UP_FOLDER\fR
The path to the start up directory.
.TP
\fBHOME\fR
Путь к каталогу настроек приложений.
.PP
Вы также можете создавать переменные окружения на платформе Macintosh.
Для этого необходимо поместить файл \fITcl Environment Variables\fR в
каталог настроек, находящийся в системном каталоге Мака. Каждая строка
этого файла должна соответствовать формату \fIVAR_NAME=var_data\fR.
.PP
Есть и другой вариант размещения переменных окружения - это поместить
переменные окружения в 'STR#' ресурс \fITcl Environment Variables\fR
приложения. Это более привычный для платформы Macintosh способ
размещения переменных окружения, чем первый вариант, более присущий
UNIX системам. Каждая строка 'STR#' ресурса имеет такой же формат как
и файл \fITcl Environment Variables\fR (см. выше).
Файл \fItclMacEnv.c\fR содержит реализацию механизма переменных
окружения для платформы Macintosh.
Этот файл содержит множество директив #define, позволяющих настроить
механизм переменных окружения соответственно нуждам вашего приложения.
.RE
.TP
\fBerrorCode\fR
В случае возникновения ошибки, эта переменная будет содержать
дополнительную информацию об ошибка в форме простой для обработке
программами.
Значение \fBerrorCode\fR представляет собой Tcl список, состоящий из
одного или более элементов. Первый элемент списка устанавливает главный
класс ошибки и определяет формат остальных элементов списка. Следующие
форматы переменной \fBerrorCode\fR используются ядром Tcl,
индивидуальные приложения могут устанавливать дополнительные форматы.
.RS
.TP
\fBARITH\fI код сообщение\fR
Этот формат используется в случае возникновения арифметической ошибки
(например, при попытке деления на нуль в команде \fBexpr\fR).
\fIКод\fR указывает определённый тип ошибки, а \fIсообщение\fR
содержит сообщение об ошибке в удобном для пользователя виде.
\fIКод\fR может принимать одно из следующих значений: 
DIVZERO (попытка деления на нуль),
DOMAIN (в случае если аргумент находится вне области определения
функции, например acos(\-3)),
IOVERFLOW (целочисленное переполнение),
OVERFLOW (переполнение при вычислениях с плавающей точкой)
или UNKNOWN (в случае, если причина ошибки не может быть установлена).
.TP
\fBCHILDKILLED\fI идентификаторПроцесса наименованиеСигнала
сообщение\fR
Этот формат используется в том случае, когда дочерний процесс
прекратил своё существование по причине получения сигнала. Второй
элемент списка \fBerrorCode\fR является идентификатором процесса и
представляет собой число, выраженное в десятичной системе исчисления.
Третий элемент содержит символьное имя сигнала, вынудившего процесс
прекратить своё существование, например, \fBSIGPIPE\fR. Символьные
имена сигналов можно найти в файле signal.h. Четвёртый элемент
представляет собой краткое сообщение о сигнале в удобном для
пользователя виде, например, для сигнала \fBSIGPIPE\fR используется
следующее сообщение об ошибке ``write on pipe with no readers'' (запись
в поток, из которого никто не читает).
.TP
\fBCHILDSTATUS\fI идентификаторПроцесса код\fR
Этот формат используется когда дочерний процесс завершил свою работу с
ненулевым кодом возврата. Второй элемент списка представляет собой
идентификатор процесса (в десятичной нотации), а третий элемент - код,
с которым завершился процесс (также в десятичной нотации).
.TP
\fBCHILDSUSP\fI идентификаторПроцесса наименованиеСигнала сообщение\fR
Этот формат используется в том случае, когда дочерний процесс был
приостановлен из-за сигнала. Второй элемент списка представляет собой
идентификатор процесса (в десятичной нотации) Третий элемент содержит
символьное имя сигнала, приостановившего процесс, например,
\fBSIGTTIN\fR. Символьные имена сигналов можно найти в файле
signal.h. Четвёртый элемент представляет собой краткое сообщение о
сигнале в удобном для пользователя виде, например, для сигнала
\fBSIGTTIN\fR используется сообщение ``background
tty read'' (чтение с терминала фоновым процессом).
.TP
\fBNONE\fR
Этот формат используется в том случае, когда отсутствует
дополнительная информация об ошибке, кроме сообщение возвращённого с
ошибкой. В этом случае \fBerrorCode\fR представляет собой список,
состоящий из одного элемента со значением \fBNONE\fR.
.TP
\fBPOSIX \fIнаименованиеОшибки сообщение\fR
Если первый элемент \fBerrorCode\fR содержит значение \fBPOSIX\fR, то
это означает, что произошла ошибка в течении вызова ядра \fBPOSIX\fR.
Второй элемент будет содержать символьное имя ошибки, соответствующее
ошибке, например, \fBENOENT\fR. Символьные имена ошибок можно найти в файле
errno.h. Третий элемент представляет собой краткое сообщение об
ошибке в удобном для пользователя виде, например, для ошибки
\fBENOENT\fR используется сообщение ``no such file or directory'' (нет
такого файла или каталога).
.PP
Для установки переменной \fBerrorCode\fR приложения должны использовать
библиотечные процедуры, такие как, например, \fBTcl_SetErrorCode\fR и
\fBTcl_PosixError\fR, или использовать команду \fBerror\fR.
Если ни один из этих методов не был использован, то интерпретатор Tcl
сбросит значение переменной в \fBNONE\fR после следующей ошибки.
.RE
.TP
\fBerrorInfo\fR
В случае возникновения ошибки, эта переменная будет содержать одну или
более строк текста, указывающих на команды и процедуры Tcl, которые
были выполнены когда произошла самая последняя ошибка.
Содержимое этой переменной принимает форму трассировки стека показывая
различные вложенные Tcl команды, которые были вызваны во время ошибки.
.TP
\fBtcl_library\fR
Эта переменная содержит имя каталога, в котором находятся системная
библиотека Tcl скриптов, тех, что используются при автозагрузке.
Значение этой переменной возвращает команда \fBinfo library\fR.
Обратитесь к странице руководства \fBlibrary\fR для получения более
детальной информации о возможностях, предоставляемых библиотекой
скриптов Tcl. Обычно каждое приложение или пакет имеет свою
собственную, специфичную для данного предложения библиотеку скриптов в
дополнение к библиотеке скриптов Tcl. Приложениям рекомендуется
устанавливать глобальную переменную вида \fB$\fIapp\fB_library\fR (где
\fIapp\fR - имя приложения) в значение полного имени каталога,
содержащего специфическую для данного приложения библиотеку.
Начальное значение \fBtcl_library\fR устанавливается в момент создания
интерпретатора, путём поиска в нескольких различных каталогах
соответствующего Tcl скрипта первоначального запуска. 
Если существует переменная окружения \fBTCL_LIBRARY\fR, то каталог, на
который она указывает, проверяется первым. Если переменная окружения
\fBTCL_LIBRARY\fR не существует или не указывает на соответствующий
каталог, то Tcl проверяет несколько других каталогов, основываясь на
установках, полученных при сборке, местонахождении двоичного файла
содержащего приложение и текущем рабочем каталоге,
.TP
\fBtcl_patchLevel\fR
При создании интерпретатора Tcl этой переменной присваивается значение
текущего уровня заплатки Tcl, например, \fB7.3p2\fR для Tcl 7.3 или
\fB7.4b4\fR для четвёртого бета выпуска Tcl 7.4.
Значение этой переменной можно также получить с помощью команды \fBinfo
patchlevel\fR.
.VS 8.0 br
.TP
\fBtcl_pkgPath\fR
Эта переменная содержит список каталогов, в которых обычно находятся
пакеты. Не используется в Windows. Обычно содержит одно или два
элемента: если содержит два элемента, то первый - это обычно каталог
для платформо-зависимых пакетов (т.е. двоичных файлов, представляющих
собой разделяемые библиотеки), а второй - это обычно каталог для
платформо-независимых пакетов (т.е. скриптов). Обычно пакет
устанавливается в подкаталог одного из каталогов, указанных в
\fBtcl_pkgPath\fR. Значение переменной \fBtcl_pkgPath\fR по умолчанию
включенается в переменную \fBauto_path\fR, таким образом эти
подкаталоги и вложенные в них автоматически просматриваются в течении
выполнения команды \fBpackage require\fR. Обратите внимание на то, что
переменная \fBtcl_pkgPath\fR не предназначена для для изменения
приложением. Значение этой переменной добавляется к \fBauto_path\fR в
период первоначальной загрузки. Изменение значения \fBtcl_pkgPath\fR
не отразится на \fBauto_path\fR. Если Вам необходимо, чтобы Tcl
производил поиск пакетов в дополнительных каталогах, то для этого
измените значение переменной \fBauto_path\fR, но не \fBtcl_pkgPath\fR.
.VE
.TP
\fBtcl_platform\fR
Представляет собой ассоциативных массив, элементы которого содержат
информацию о платформе, на которой выполняется приложение, такую как,
например, наименование операционной системы, номер текущего выпуска,
набор инструкций машины. Элементы указанные ниже будут всегда
определены, но могут иметь в качестве значения пустую строку, если Tcl
не может извлечь необходимую информацию. В дополнение к этому
необходимо отметить, что расширения и приложения могут дополнять этот
массив. Пердопределены следующие элементы:

.RS
.VS
.TP
\fBbyteOrder\fR
Принятый для этой машины порядок расположения байтов, Один из двух:
\fBlittleEndian\fR или \fBbigEndian\fR.
.VE
.TP
\fBdebug\fR
Если эта переменная существует, то интерпретатор был собран с
дополнительной отладочной информацией. Эта переменная будет
существовать в Windows, так что авторы расширений могут указывать
какой пакет загружать в зависимости от загруженной библиотеки времени
исполнения языка Си.
.TP
\fBmachine\fR
Набор инструкций выполняемых данной машиной, например, \fBintel\fR,
\fBPPC\fR, \fB68k\fR или \fBsun4m\fR. В UNIX системах это значение
возвращает команд \fBuname -m\fR.
.TP
\fBos\fR 
Наименование операционной системы работающей на этой машине, такое
как, например, \fBWindows\fR, \fBWindows NT\fR, \fBMacOS\fR или \fBSunOS\fR.
В UNIX системах это значение возвращает команда \fBuname -s\fR.
В операционных системах Windows 95 и Windows 98 возвращаемое значение
будет равно \fBWindows 95\fR для лучшего обеспечения обратной
совместимости с Windows 95. Если вам необходимо уточнить версию
операционной системы, используйте элементмассива с именем \fBosVersion\fR.
.TP
\fBosVersion\fR
Номер версии операционной системы работающей на этой машине.
В UNIX системах это значение возвращает команда \fBuname -r\fR. Для
Windows 95 номер версии будет равен 4.0, для Windows 98 номер версии
равен 4.10.
.TP
\fBplatform\fR
Этот элемент массива может принимать значение \fBwindows\fR,
\fBmacintosh\fR или \fBunix\fR. Этот элемент массива позволяет
определить тип операционной системы машины.
.TP
\fBthreaded\fR
Если эта переменная существует, то интерпретатор был собран с
поддержкой многопоточных вычислений.
.TP
\fBuser\fR
Эта переменная позволяет определить текущего пользователя, основываясь
на информации доступной на данной платформе. Для UNIX систем такая
информация содержиться в переменных окружения USER и LOGNAME, для систем
Windows и Macintosh используется функция GetUserName.
.TP
\fBwordSize\fR
.VS 8.4
Эта переменная позволяет определить размер машинного слова в байтах
(если быть точным, то это результат вычисления выражения
\fIsizeof(long)\fR на языке Си).
.VE 8.4
.RE
.TP
\fBtcl_precision\fR
.VS
Эта переменная управляет количеством цифр учитываемых при
преобразовании значения с плавающей точкой в строку. Значение по
умолчанию - 12.
Значение 17 является предпочтительным для чисел с плавающей точкой
стандарта IEEE по той причине, что оно позволяет преобразовывать числа
с плавающей точкой двойной точности в строку и обратно в двоичную
форму без потери точности.
Однако, использование 17 цифр препятствует любым округлениям,
создающие длинные, менее предсказуемые результаты. Например, \fBexpr
1.4\fR вернёт 1.3999999999999999 при \fBtcl_platform\fR равном 17, а
при \fBtcl_platform\fR равном 12 значение выражения - 1.4.
.RS
Все интерпретаторы процесса совместно используют единственный экземпляр
\fBtcl_precision\fR - изменение значения переменной в одном
интерпретаторе окажет влияние и на другие интерпретаторы. Однако,
безопасные интерпретаторы не позволяют изменять переменную.
.RE
.VE
.TP
\fBtcl_rcFileName\fR
Значение этой переменной присваивается во время запуска приложения и
указывает имя пользовательского файла настроек. Если значение
переменной присваивается на этапе инициализации приложения, то код
инициализации Tcl проверяет существование файла и читает его с помощью
команды \fBsource\fR. Например, при запуске \fBwish\fR переменной
присваивается значение \fB~/.wishrc\fR в UNIX системах и
\fB~/wishrc.tcl\fR в Windows системах.
.TP
\fBtcl_rcRsrcName\fR
Эта переменная используется только в Macintosh системах. Во время
инициализации переменной присваивается значение, указывающее на имя
пользовательского \fBTEXT\fR ресурса, находящегося в приложении или в
ветках ресурсов расширения. Если значение переменной присваивается на
этапе инициализации приложения, то код инициализации Tcl проверяет
существование ресурса и читает его с помощью команды \fBsource\fR.
Например, приложение \fBwish\fR для Macintosh присваивает этой
переменной значение \fBtclshrc\fR.
.TP
\fBtcl_traceCompile\fR
Значение этой переменной контролирует объём информации, выдаваемой во
время компиляции байткода. По умолчанию значение tcl_traceCompile
равно нулю, и никакая информация не отображается. Значение 1 позволит
получать в стандартном потоке вывода (stdout) при компиляции команд
 верхнего уровня или процедур краткую сводную информацию о
происходящем, умещающуюся в одну строку.
Значение 2  позволит получать в стандартном потоке вывода (stdout)
детальный отчёт о байткодовых инструкциях во время всей компиляции.
Использование этой переменной полезно при отслеживании подозрительных проблем
с Tcl компилятором. Иногда полезно применять переменную при
преобразовании существующего кода для использования с Tcl8.0.

Эта переменная и соответствующая функциональность доступны только в
том случае, если при сборке интерпретатора Tcl было определено значение
TCL_COMPILE_DEBUG.
.TP
\fBtcl_traceExec\fR
Значение этой переменной контролирует объём информации, выдаваемой во
 время выполнения байткода. По умолчанию значение tcl_traceCompile
 равно нулю, и никакая информация не отображается. Значение 1 позволит
получать в стандартном потоке вывода (stdout) при выполнении процедур
краткую сводную информацию о происходящем, умещающуюся в одну строку.
Значение 2 позволит получать в стандартном потоке вывода (stdout)
строку отчёта, содержащую наименование команды и её аргументы, при
выполнении любой Tcl команды.
Значение 3 позволит получить детальный отчет, показывающий результат
выполнения каждой байткодовой инструкции.
Обратите внимание, что в случае, когда tcl_traceExec равно 2 или 3,
такие команды, как set или incr, будучи заменёнными на байткодовые
инструкции, не отображаются.
Использование этой переменной полезно при отслеживании подозрительных проблем
с Tcl компилятором байткода и интерпретатором.
Иногда полезно применять переменную при
преобразовании существующего кода для использования с Tcl8.0.


Эта переменная и соответствующая функциональность доступны только в
том случае, если при сборке интерпретатора Tcl было определено значение
TCL_COMPILE_DEBUG.
.TP
\fBtcl_wordchars\fR
Значение  этой переменной представляет собой регулярное выражение,
которое определяет, какие символы являются частями ``слов'', это
используется, например, для выделения слов двойным нажатии на кнопку
мыши в элементе управления text библиотеки Tk. Значние переменной
зависит от платформы. В Windows системах оно по умолчанию равно
\fB\\S\fR, что означает ``что угодно, кроме символа пробела из
кодировки Unicode''. В других случаях начние по умолчанию \fB\\w\fR,
что означает ``любой символ кодировки Unicode, считающийся частью
слова (цифра, буква или символ подчеркивания)''.
.TP
\fBtcl_nonwordchars\fR
Значение этой переменной представляет собой
регулярное выражение, которое определяет, какие символы не являются
частями ``слов'', это используется, например, для выделения слов
двойным нажатии на кнопку мыши в элементе управления text библиотеки
Tk. Значние переменной зависит от платформы. В Windows системах оно по
умолчанию равно \fB\\s\fR, что означает ``любой символ пробела из
кодировки Unicode''.  В других случаях начние по умолчанию \fB\\W\fR,
что означает ``любой символ кодировки Unicode, кроме символов
считающихся частью слова (цифра, буква или символ подчеркивания)''.
.TP
\fBtcl_version\fR
После создания интерпретатора Tcl присваивает этой переменной номер
текущей версии Tcl в формате \fIx.y\fR. Изменение части номера версии,
обозначенной \fIx\fR, символизируют о больших изменениях и возможных
проблемах с совместимостью, изменение же \fIy\fR позволяет
предположить о небольших улучшениях и исправлениях ошибок, не влияющих
на совместимость. Значение этой переменной также можно получить с
помощью команды \fBinfo tclversion\fR.

.SH "SEE ALSO"
eval(n)

.SH KEYWORDS
арифметика, байткод, компилятор, ошибка, окружение, POSIX, точность,
подпроцесс, переменные,
arithmetic, bytecode, compiler, error, environment, POSIX, precision, subprocess, variables
